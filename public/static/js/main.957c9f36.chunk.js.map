{"version":3,"sources":["images/spacex_logo_black.png","App.js","components/LaunchItem.js","components/Launches.js","components/StatusKeys.js","pages/Frontpage.js","pages/LaunchSpecific.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","className","children","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","classNames","format","to","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","StatusKeys","Frontpage","src","Logo","alt","style","width","margin","display","LAUNCH_QUERY","LaunchSpecific","useParams","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.957c9f36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex_logo_black.dc45d3df.png\";","import React from 'react';\nimport './styles/main.scss';\n\nconst App = (props) => {\n  return <div className={'wrapper'}>{props.children}</div>;\n};\n\nexport default App;\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LaunchItem = ({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\r\n}) => {\r\n  return (\r\n    <div className={'launchitem'}>\r\n      <div className={'launchitem__details'}>\r\n        <h1>\r\n          Mission:{' '}\r\n          <span\r\n            className={classNames({\r\n              'text--success': launch_success,\r\n              'text--error': !launch_success,\r\n            })}\r\n          >\r\n            {mission_name}\r\n          </span>\r\n        </h1>\r\n        <p>\r\n          Date: <Moment format={'DD-MM-YYYY HH:mm'}>{launch_date_local}</Moment>\r\n        </p>\r\n      </div>\r\n      <div className={'launchitem__actions'}>\r\n        <Link\r\n          className={'launchitem__actions--btn btn'}\r\n          to={`/launch/${flight_number}`}\r\n        >\r\n          launch details\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchItem;\r\n","import React from 'react';\r\n\r\nimport LaunchItem from './LaunchItem';\r\n\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launches = () => {\r\n  return (\r\n    <>\r\n      <Query query={LAUNCHES_QUERY}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>loading</h4>;\r\n          if (error) return <h4>error</h4>;\r\n          console.log(data);\r\n          return (\r\n            <>\r\n              {data.launches.map((launch) => (\r\n                <LaunchItem key={launch.flight_number} launch={launch} />\r\n              ))}\r\n            </>\r\n          );\r\n        }}\r\n      </Query>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Launches;\r\n","import React from 'react';\r\n\r\nconst StatusKeys = () => {\r\n  return (\r\n    <div>\r\n      <p className={'statuskey'}>\r\n        <span className={'statuskey statuskey--success'} /> = Success.\r\n      </p>\r\n      <p className={'statuskey'}>\r\n        <span className={'statuskey statuskey--error'} /> = Failure.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusKeys;\r\n","import React from 'react';\r\nimport Logo from '../images/spacex_logo_black.png';\r\n\r\nimport Launches from '../components/Launches';\r\nimport StatusKeys from '../components/StatusKeys';\r\n\r\nconst Frontpage = () => {\r\n  return (\r\n    <>\r\n      <img\r\n        src={Logo}\r\n        alt=\"spacex logo\"\r\n        style={{ width: 300, margin: 'auto', display: 'block' }}\r\n      />\r\n      <StatusKeys />\r\n      <Launches />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Frontpage;\r\n","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst LaunchSpecific = (props) => {\r\n  let { flight_number } = useParams();\r\n  flight_number = parseInt(flight_number);\r\n  return (\r\n    <>\r\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>loading</h4>;\r\n          if (error) return console.log(error);\r\n\r\n          const {\r\n            mission_name,\r\n            flight_number,\r\n            launch_date_local,\r\n            launch_year,\r\n            launch_success,\r\n            rocket: { rocket_id, rocket_name, rocket_type },\r\n          } = data.launch;\r\n\r\n          console.log(data);\r\n          return (\r\n            <div>\r\n              <h1>Mission: {mission_name}</h1>\r\n              <h3>Launch Details</h3>\r\n              <ul className={'list'}>\r\n                <li className={'list__item'}>Flight Number: {flight_number}</li>\r\n                <li className={'list__item'}>Launch Year: {launch_year}</li>\r\n                <li className={'list__item'}>\r\n                  Launch Successful:{' '}\r\n                  <span\r\n                    className={classNames({\r\n                      'text--success': launch_success,\r\n                      'text--error': !launch_success,\r\n                    })}\r\n                  >\r\n                    {launch_success ? 'yes' : 'no'}\r\n                  </span>\r\n                </li>\r\n                <li className={'list__item'}>Flight Number: {flight_number}</li>\r\n              </ul>\r\n              <h3>Rocket Details</h3>\r\n              <ul className={'list'}>\r\n                <li className={'list__item'}>Rocket ID: {rocket_id}</li>\r\n                <li className={'list__item'}>Rocket Name: {rocket_name}</li>\r\n                <li className={'list__item'}>Rocket Type: {rocket_type}</li>\r\n              </ul>\r\n              <hr />\r\n              <Link className={'btn'} to={'/'}>\r\n                Back\r\n              </Link>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LaunchSpecific;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport App from './App';\nimport Frontpage from './pages/Frontpage';\nimport LaunchSpecific from './pages/LaunchSpecific';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App>\n        <Switch>\n          <Route path=\"/\" exact component={Frontpage} />\n          <Route path=\"/launch/:flight_number\" component={LaunchSpecific} />\n        </Switch>\n      </App>\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}